"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from shippo._hooks import HookContext
from shippo.models import components, errors, operations
from shippo.types import BaseModel
import shippo.utils as utils
from typing import Optional, Union

class Shipments(BaseSDK):
    r"""A shipment is the act of transporting goods. A shipment object contains **to** and **from** addresses, and the parcel details that you are shipping. You can use the shipment object to retrieve shipping rates and purchase a shipping label.
    <SchemaDefinition schemaRef=\"#/components/schemas/Shipment\"/>

    # Shipment Extras
    The following values are supported for the `extra` field of the shipment object.
    <SchemaDefinition schemaRef=\"#/components/schemas/ShipmentExtra\"/>
    """
    
    
    def list(
        self, *,
        request: Optional[Union[operations.ListShipmentsRequest, operations.ListShipmentsRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.ShipmentPaginatedList:
        r"""List all shipments

        Returns a list of all shipment objects.<br><br>
        In order to filter results, you must use the below path parameters.
        A maximum date range of 90 days is permitted.
        Provided dates should be ISO 8601 UTC dates (timezone offsets are currently not supported).<br><br>

        Optional path parameters:<br>
        `object_created_gt`- object(s) created greater than a provided date time<br>
        `object_created_gte` - object(s) created greater than or equal to a provided date time<br>
        `object_created_lt` - object(s) created less than a provided date time<br>
        `object_created_lte` - object(s) created less than or equal to a provided date time<br>

        Date format examples:<br>
        `2017-01-01`<br>
        `2017-01-01T03:30:30` or `2017-01-01T03:30:30.5`<br>
        `2017-01-01T03:30:30Z`<br><br>

        Example URL:<br>
        `https://api.goshippo.com/shipments/?object_created_gte=2017-01-01T00:00:30&object_created_lt=2017-04-01T00:00:30`

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ListShipmentsRequest)
        
        req = self.build_request(
            method="GET",
            path="/shipments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListShipmentsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ListShipments", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.ShipmentPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        request: Optional[Union[operations.ListShipmentsRequest, operations.ListShipmentsRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.ShipmentPaginatedList:
        r"""List all shipments

        Returns a list of all shipment objects.<br><br>
        In order to filter results, you must use the below path parameters.
        A maximum date range of 90 days is permitted.
        Provided dates should be ISO 8601 UTC dates (timezone offsets are currently not supported).<br><br>

        Optional path parameters:<br>
        `object_created_gt`- object(s) created greater than a provided date time<br>
        `object_created_gte` - object(s) created greater than or equal to a provided date time<br>
        `object_created_lt` - object(s) created less than a provided date time<br>
        `object_created_lte` - object(s) created less than or equal to a provided date time<br>

        Date format examples:<br>
        `2017-01-01`<br>
        `2017-01-01T03:30:30` or `2017-01-01T03:30:30.5`<br>
        `2017-01-01T03:30:30Z`<br><br>

        Example URL:<br>
        `https://api.goshippo.com/shipments/?object_created_gte=2017-01-01T00:00:30&object_created_lt=2017-04-01T00:00:30`

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ListShipmentsRequest)
        
        req = self.build_request(
            method="GET",
            path="/shipments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListShipmentsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ListShipments", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.ShipmentPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def create(
        self, *,
        request: Union[components.ShipmentCreateRequest, components.ShipmentCreateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Shipment:
        r"""Create a new shipment

        Creates a new shipment object.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ShipmentCreateRequest(
            request=utils.unmarshal(request, components.ShipmentCreateRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/shipments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateShipmentGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.ShipmentCreateRequest),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateShipment", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Shipment])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        request: Union[components.ShipmentCreateRequest, components.ShipmentCreateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Shipment:
        r"""Create a new shipment

        Creates a new shipment object.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ShipmentCreateRequest(
            request=utils.unmarshal(request, components.ShipmentCreateRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/shipments",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateShipmentGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.ShipmentCreateRequest),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateShipment", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Shipment])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        shipment_id: str,
        server_url: Optional[str] = None,
    ) -> components.Shipment:
        r"""Retrieve a shipment

        Returns an existing shipment using an object ID

        :param shipment_id: Object ID of the shipment to update
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetShipmentRequest(
            shipment_id=shipment_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/shipments/{ShipmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetShipmentGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetShipment", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Shipment])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        shipment_id: str,
        server_url: Optional[str] = None,
    ) -> components.Shipment:
        r"""Retrieve a shipment

        Returns an existing shipment using an object ID

        :param shipment_id: Object ID of the shipment to update
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetShipmentRequest(
            shipment_id=shipment_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/shipments/{ShipmentId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetShipmentGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetShipment", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Shipment])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
