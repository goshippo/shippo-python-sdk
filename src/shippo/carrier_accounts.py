"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from shippo._hooks import HookContext
from shippo.models import components, errors, operations
from shippo.types import BaseModel
import shippo.utils as utils
from typing import Optional, Union

class CarrierAccounts(BaseSDK):
    r"""Carriers are the companies who deliver your package. Shippo uses Carrier account objects as credentials to retrieve shipping rates and purchase labels from shipping Carriers.

    <SchemaDefinition schemaRef=\"#/components/schemas/CarrierAccount\"/>
    """
    
    
    def list(
        self, *,
        request: Optional[Union[operations.ListCarrierAccountsRequest, operations.ListCarrierAccountsRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccountPaginatedList:
        r"""List all carrier accounts

        Returns a list of all carrier accounts connected to your Shippo account. These carrier accounts include both Shippo carrier accounts and your own carrier accounts that you have connected to your Shippo account.

        Additionally, you can get information about the service levels associated with each carrier account by passing in the `?service_levels=true` query parameter. <br>
        Using it appends the property `service_levels` to each carrier account. <br>
        By default, if the query parameter is omitted, the `service_levels` property will not be included in the response.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ListCarrierAccountsRequest)
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListCarrierAccountsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ListCarrierAccounts", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccountPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        request: Optional[Union[operations.ListCarrierAccountsRequest, operations.ListCarrierAccountsRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccountPaginatedList:
        r"""List all carrier accounts

        Returns a list of all carrier accounts connected to your Shippo account. These carrier accounts include both Shippo carrier accounts and your own carrier accounts that you have connected to your Shippo account.

        Additionally, you can get information about the service levels associated with each carrier account by passing in the `?service_levels=true` query parameter. <br>
        Using it appends the property `service_levels` to each carrier account. <br>
        By default, if the query parameter is omitted, the `service_levels` property will not be included in the response.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, operations.ListCarrierAccountsRequest)
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListCarrierAccountsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ListCarrierAccounts", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccountPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def create(
        self, *,
        request: Union[components.ConnectExistingOwnAccountRequest, components.ConnectExistingOwnAccountRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Create a new carrier account

        Creates a new carrier account or connects an existing carrier account to the Shippo account.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ConnectExistingOwnAccountRequest(
            request=utils.unmarshal(request, components.ConnectExistingOwnAccountRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/carrier_accounts",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.ConnectExistingOwnAccountRequest),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        request: Union[components.ConnectExistingOwnAccountRequest, components.ConnectExistingOwnAccountRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Create a new carrier account

        Creates a new carrier account or connects an existing carrier account to the Shippo account.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ConnectExistingOwnAccountRequest(
            request=utils.unmarshal(request, components.ConnectExistingOwnAccountRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/carrier_accounts",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.ConnectExistingOwnAccountRequest),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        carrier_account_id: str,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Retrieve a carrier account

        Returns an existing carrier account using an object ID.

        :param carrier_account_id: Object ID of the carrier account
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetCarrierAccountRequest(
            carrier_account_id=carrier_account_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts/{CarrierAccountId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        carrier_account_id: str,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Retrieve a carrier account

        Returns an existing carrier account using an object ID.

        :param carrier_account_id: Object ID of the carrier account
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetCarrierAccountRequest(
            carrier_account_id=carrier_account_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts/{CarrierAccountId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update(
        self, *,
        carrier_account_id: str,
        carrier_account_base: Optional[Union[components.CarrierAccountBase, components.CarrierAccountBaseTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Update a carrier account

        Updates an existing carrier account object. The account_id and carrier can't be updated. This is because they form the unique identifier together.

        :param carrier_account_id: Object ID of the carrier account
        :param carrier_account_base: Examples.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.UpdateCarrierAccountRequest(
            carrier_account_id=carrier_account_id,
            carrier_account_base=utils.unmarshal(carrier_account_base, components.CarrierAccountBase) if not isinstance(carrier_account_base, BaseModel) and carrier_account_base is not None else carrier_account_base,
        )
        
        req = self.build_request(
            method="PUT",
            path="/carrier_accounts/{CarrierAccountId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.UpdateCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.carrier_account_base, False, True, "json", Optional[components.CarrierAccountBase]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdateCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_async(
        self, *,
        carrier_account_id: str,
        carrier_account_base: Optional[Union[components.CarrierAccountBase, components.CarrierAccountBaseTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Update a carrier account

        Updates an existing carrier account object. The account_id and carrier can't be updated. This is because they form the unique identifier together.

        :param carrier_account_id: Object ID of the carrier account
        :param carrier_account_base: Examples.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.UpdateCarrierAccountRequest(
            carrier_account_id=carrier_account_id,
            carrier_account_base=utils.unmarshal(carrier_account_base, components.CarrierAccountBase) if not isinstance(carrier_account_base, BaseModel) and carrier_account_base is not None else carrier_account_base,
        )
        
        req = self.build_request(
            method="PUT",
            path="/carrier_accounts/{CarrierAccountId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.UpdateCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.carrier_account_base, False, True, "json", Optional[components.CarrierAccountBase]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdateCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def initiate_oauth2_signin(
        self, *,
        carrier_account_object_id: str,
        redirect_uri: str,
        state: Optional[str] = None,
        server_url: Optional[str] = None,
    ) -> operations.InitiateOauth2SigninResponse:
        r"""Connect an existing carrier account using OAuth 2.0

        Used by client applications to setup or reconnect an existing carrier account with carriers that support OAuth 2.0

        :param carrier_account_object_id: The carrier account ID (UUID) to start a signin process.
        :param redirect_uri: Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request.
        :param state: A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.InitiateOauth2SigninRequest(
            carrier_account_object_id=carrier_account_object_id,
            redirect_uri=redirect_uri,
            state=state,
        )
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts/{CarrierAccountObjectId}/signin/initiate",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.InitiateOauth2SigninGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="InitiateOauth2Signin", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","4XX","5XX"],
        )
        
        res = operations.InitiateOauth2SigninResponse(headers={})
        
        if http_res.status_code == 302:
            res.headers = utils.get_response_headers(http_res.headers)
            
        elif http_res.status_code == 400:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.InitiateOauth2SigninResponseBodyData)
                out = errors.InitiateOauth2SigninResponseBody(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.InitiateOauth2SigninCarrierAccountsResponseResponseBodyData)
                out = errors.InitiateOauth2SigninCarrierAccountsResponseResponseBody(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.InitiateOauth2SigninCarrierAccountsResponseBodyData)
                out = errors.InitiateOauth2SigninCarrierAccountsResponseBody(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)

        return res
    
    
    async def initiate_oauth2_signin_async(
        self, *,
        carrier_account_object_id: str,
        redirect_uri: str,
        state: Optional[str] = None,
        server_url: Optional[str] = None,
    ) -> operations.InitiateOauth2SigninResponse:
        r"""Connect an existing carrier account using OAuth 2.0

        Used by client applications to setup or reconnect an existing carrier account with carriers that support OAuth 2.0

        :param carrier_account_object_id: The carrier account ID (UUID) to start a signin process.
        :param redirect_uri: Callback URL. The URL that tells the authorization server where to send the user back to after they approve the request.
        :param state: A random string generated by the consuming application and included in the request to prevent CSRF attacks. The consuming application checks that the same value is returned after the user authorizes Shippo.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.InitiateOauth2SigninRequest(
            carrier_account_object_id=carrier_account_object_id,
            redirect_uri=redirect_uri,
            state=state,
        )
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts/{CarrierAccountObjectId}/signin/initiate",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.InitiateOauth2SigninGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="InitiateOauth2Signin", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","401","404","4XX","5XX"],
        )
        
        res = operations.InitiateOauth2SigninResponse(headers={})
        
        if http_res.status_code == 302:
            res.headers = utils.get_response_headers(http_res.headers)
            
        elif http_res.status_code == 400:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.InitiateOauth2SigninResponseBodyData)
                out = errors.InitiateOauth2SigninResponseBody(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 401:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.InitiateOauth2SigninCarrierAccountsResponseResponseBodyData)
                out = errors.InitiateOauth2SigninCarrierAccountsResponseResponseBody(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 404:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                data = utils.unmarshal_json(http_res.text, errors.InitiateOauth2SigninCarrierAccountsResponseBodyData)
                out = errors.InitiateOauth2SigninCarrierAccountsResponseBody(data=data)
                  
                raise out
            else:
                content_type = http_res.headers.get("Content-Type")
                raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)

        return res
    
    
    def register(
        self, *,
        request: Union[operations.RegisterCarrierAccountRequestBody, operations.RegisterCarrierAccountRequestBodyTypedDict],
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Add a Shippo carrier account

        Adds a Shippo carrier account

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.RegisterCarrierAccountRequestBody(
            request=utils.unmarshal(request, operations.RegisterCarrierAccountRequestBody) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/carrier_accounts/register/new",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.RegisterCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", operations.RegisterCarrierAccountRequestBody),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="RegisterCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def register_async(
        self, *,
        request: Union[operations.RegisterCarrierAccountRequestBody, operations.RegisterCarrierAccountRequestBodyTypedDict],
        server_url: Optional[str] = None,
    ) -> components.CarrierAccount:
        r"""Add a Shippo carrier account

        Adds a Shippo carrier account

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.RegisterCarrierAccountRequestBody(
            request=utils.unmarshal(request, operations.RegisterCarrierAccountRequestBody) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/carrier_accounts/register/new",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.RegisterCarrierAccountGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", operations.RegisterCarrierAccountRequestBody),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="RegisterCarrierAccount", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccount])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get_registration_status(
        self, *,
        carrier: operations.Carrier,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccountRegistrationStatus:
        r"""Get Carrier Registration status

        Returns the registration status for the given account for the given carrier

        :param carrier: filter by specific carrier
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetCarrierRegistrationStatusRequest(
            carrier=carrier,
        )
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts/reg-status",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetCarrierRegistrationStatusGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetCarrierRegistrationStatus", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccountRegistrationStatus])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_registration_status_async(
        self, *,
        carrier: operations.Carrier,
        server_url: Optional[str] = None,
    ) -> components.CarrierAccountRegistrationStatus:
        r"""Get Carrier Registration status

        Returns the registration status for the given account for the given carrier

        :param carrier: filter by specific carrier
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetCarrierRegistrationStatusRequest(
            carrier=carrier,
        )
        
        req = self.build_request(
            method="GET",
            path="/carrier_accounts/reg-status",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetCarrierRegistrationStatusGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetCarrierRegistrationStatus", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.CarrierAccountRegistrationStatus])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
