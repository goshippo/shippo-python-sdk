"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .distanceunit import DistanceUnit
from .parceltemplatearamexaustralia import ParcelTemplateAramexAustralia
from .parceltemplatecouriersplease import ParcelTemplateCouriersPlease
from .parceltemplatedhlecommerce import ParcelTemplateDHLeCommerce
from .parceltemplatedpduk import ParcelTemplateDPDUK
from .parceltemplatefedex import ParcelTemplateFedEx
from .parceltemplateups import ParcelTemplateUPS
from .parceltemplateusps import ParcelTemplateUSPS
from .weightunit import WeightUnit
from dataclasses_json import Undefined, dataclass_json
from shippo import utils
from typing import Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ParcelTemplate:
    r"""ParcelTemplate represents the parcel as retrieved from the database"""
    distance_unit: DistanceUnit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance_unit') }})
    r"""The measure unit used for length, width and height."""
    height: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height') }})
    length: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('length') }})
    mass_unit: WeightUnit = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mass_unit') }})
    r"""The unit used for weight."""
    weight: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight') }})
    width: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width') }})
    is_default: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('is_default'), 'exclude': lambda f: f is None }})
    r"""Can be null or can pass in a provider parcel token"""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    object_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object_id'), 'exclude': lambda f: f is None }})
    template: Optional[Union[ParcelTemplateFedEx, ParcelTemplateUPS, ParcelTemplateUSPS, ParcelTemplateDHLeCommerce, ParcelTemplateDPDUK, ParcelTemplateCouriersPlease, ParcelTemplateAramexAustralia]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('template'), 'exclude': lambda f: f is None }})
    r"""If template is passed, `length`, `width`, `height`, and `distance_unit` are not required"""
    

