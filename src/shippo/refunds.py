"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from shippo._hooks import HookContext
from shippo.models import components, errors, operations
from shippo.types import BaseModel
import shippo.utils as utils
from typing import Optional, Union

class Refunds(BaseSDK):
    r"""Refunds are reimbursements for successfully created but unused shipping labels or other charges.
    <SchemaDefinition schemaRef=\"#/components/schemas/Refund\"/>
    """
    
    
    def create(
        self, *,
        request: Union[components.RefundRequestBody, components.RefundRequestBodyTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Refund:
        r"""Create a refund

        Creates a new refund object.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.RefundRequestBody(
            request=utils.unmarshal(request, components.RefundRequestBody) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/refunds",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateRefundGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.RefundRequestBody),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateRefund", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Refund])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        request: Union[components.RefundRequestBody, components.RefundRequestBodyTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Refund:
        r"""Create a refund

        Creates a new refund object.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.RefundRequestBody(
            request=utils.unmarshal(request, components.RefundRequestBody) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/refunds",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateRefundGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.RefundRequestBody),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateRefund", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Refund])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def list(
        self, *,
        server_url: Optional[str] = None,
    ) -> components.RefundPaginatedList:
        r"""List all refunds

        Returns a list all refund objects.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.ListRefundsRequest(
        )
        
        req = self.build_request(
            method="GET",
            path="/refunds/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListRefundsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ListRefunds", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.RefundPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        server_url: Optional[str] = None,
    ) -> components.RefundPaginatedList:
        r"""List all refunds

        Returns a list all refund objects.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.ListRefundsRequest(
        )
        
        req = self.build_request(
            method="GET",
            path="/refunds/",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListRefundsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ListRefunds", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.RefundPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        refund_id: str,
        server_url: Optional[str] = None,
    ) -> components.Refund:
        r"""Retrieve a refund

        Returns an existing rate using a rate object ID.

        :param refund_id: Object ID of the refund to update
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetRefundRequest(
            refund_id=refund_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/refunds/{RefundId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetRefundGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetRefund", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Refund])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        refund_id: str,
        server_url: Optional[str] = None,
    ) -> components.Refund:
        r"""Retrieve a refund

        Returns an existing rate using a rate object ID.

        :param refund_id: Object ID of the refund to update
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetRefundRequest(
            refund_id=refund_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/refunds/{RefundId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetRefundGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetRefund", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Refund])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
