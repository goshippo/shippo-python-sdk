"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from shippo._hooks import HookContext
from shippo.models import components, errors, operations
from shippo.types import BaseModel
import shippo.utils as utils
from typing import List, Optional, Union

class ServiceGroups(BaseSDK):
    r"""A service group is a set of service levels grouped together.
    Rates at checkout uses services groups to present available shipping options to customers in their shopping basket.
    <SchemaDefinition schemaRef=\"#/components/schemas/ServiceGroup\"/>
    """
    
    
    def list(
        self, *,
        server_url: Optional[str] = None,
    ) -> List[components.ServiceGroup]:
        r"""List all service groups

        Returns a list of service group objects.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.ListServiceGroupsRequest(
        )
        
        req = self.build_request(
            method="GET",
            path="/service-groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListServiceGroupsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ListServiceGroups", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[List[components.ServiceGroup]])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        server_url: Optional[str] = None,
    ) -> List[components.ServiceGroup]:
        r"""List all service groups

        Returns a list of service group objects.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.ListServiceGroupsRequest(
        )
        
        req = self.build_request(
            method="GET",
            path="/service-groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListServiceGroupsGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ListServiceGroups", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[List[components.ServiceGroup]])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def create(
        self, *,
        request: Union[components.ServiceGroupCreateRequest, components.ServiceGroupCreateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.ServiceGroup:
        r"""Create a new service group

        Creates a new service group.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ServiceGroupCreateRequest(
            request=utils.unmarshal(request, components.ServiceGroupCreateRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/service-groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateServiceGroupGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.ServiceGroupCreateRequest),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateServiceGroup", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.ServiceGroup])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        request: Union[components.ServiceGroupCreateRequest, components.ServiceGroupCreateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.ServiceGroup:
        r"""Create a new service group

        Creates a new service group.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ServiceGroupCreateRequest(
            request=utils.unmarshal(request, components.ServiceGroupCreateRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/service-groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateServiceGroupGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.ServiceGroupCreateRequest),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateServiceGroup", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.ServiceGroup])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update(
        self, *,
        request: Optional[Union[components.ServiceGroupUpdateRequest, components.ServiceGroupUpdateRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.ServiceGroup:
        r"""Update an existing service group

        Updates an existing service group object. <br>The object_id cannot be updated as it is the unique identifier for the object.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ServiceGroupUpdateRequest(
            request=utils.unmarshal(request, components.ServiceGroupUpdateRequest) if not isinstance(request, BaseModel) and request is not None else request,
        )
        
        req = self.build_request(
            method="PUT",
            path="/service-groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.UpdateServiceGroupGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[components.ServiceGroupUpdateRequest]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdateServiceGroup", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.ServiceGroup])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_async(
        self, *,
        request: Optional[Union[components.ServiceGroupUpdateRequest, components.ServiceGroupUpdateRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.ServiceGroup:
        r"""Update an existing service group

        Updates an existing service group object. <br>The object_id cannot be updated as it is the unique identifier for the object.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.ServiceGroupUpdateRequest(
            request=utils.unmarshal(request, components.ServiceGroupUpdateRequest) if not isinstance(request, BaseModel) and request is not None else request,
        )
        
        req = self.build_request(
            method="PUT",
            path="/service-groups",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.UpdateServiceGroupGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, True, "json", Optional[components.ServiceGroupUpdateRequest]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdateServiceGroup", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.ServiceGroup])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def delete(
        self, *,
        service_group_id: str,
        server_url: Optional[str] = None,
    ):
        r"""Delete a service group

        Deletes an existing service group using an object ID.

        :param service_group_id: Object ID of the service group
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.DeleteServiceGroupRequest(
            service_group_id=service_group_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/service-groups/{ServiceGroupId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            _globals=operations.DeleteServiceGroupGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="DeleteServiceGroup", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def delete_async(
        self, *,
        service_group_id: str,
        server_url: Optional[str] = None,
    ):
        r"""Delete a service group

        Deletes an existing service group using an object ID.

        :param service_group_id: Object ID of the service group
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.DeleteServiceGroupRequest(
            service_group_id=service_group_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/service-groups/{ServiceGroupId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            _globals=operations.DeleteServiceGroupGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="DeleteServiceGroup", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
