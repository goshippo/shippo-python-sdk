"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import carrierparceltemplatestructlistwrapper as components_carrierparceltemplatestructlistwrapper
from ...models.components import httpmetadata as components_httpmetadata
from enum import Enum
from typing import Optional

class Include(str, Enum):
    r"""filter by user or enabled"""
    ALL = 'all'
    USER = 'user'
    ENABLED = 'enabled'


@dataclasses.dataclass
class ListCarrierParcelTemplatesRequest:
    include: Optional[Include] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'include', 'style': 'form', 'explode': True }})
    r"""filter by user or enabled"""
    carrier: Optional[str] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'carrier', 'style': 'form', 'explode': True }})
    r"""filter by specific carrier"""
    shippo_api_version: Optional[str] = dataclasses.field(default=None, metadata={'header': { 'field_name': 'SHIPPO-API-VERSION', 'style': 'simple', 'explode': False }})
    r"""String used to pick a non-default API version to use"""
    



@dataclasses.dataclass
class ListCarrierParcelTemplatesResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field()
    carrier_parcel_template_struct_list_wrapper: Optional[components_carrierparceltemplatestructlistwrapper.CarrierParcelTemplateStructListWrapper] = dataclasses.field(default=None)
    

