"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from shippo._hooks import HookContext
from shippo.models import components, errors, operations
from shippo.types import BaseModel
import shippo.utils as utils
from typing import Optional, Union

class UserParcelTemplates(BaseSDK):
    r"""A user parcel template represents a package used for shipping that has preset dimensions and attributes defined
    by you. They are useful for capturing attributes of parcel-types you frequently use for shipping, allowing
    them to be defined once and then used for many shipments. These parcel templates can also be used for live rates.

    User parcel templates can also be created using a carrier parcel template, where the dimensions will be copied from
    the carrier presets, but the weight can be configured by you.
    <SchemaDefinition schemaRef=\"#/components/schemas/UserParcelTemplate\"/>
    """
    
    
    def list(
        self, *,
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplateList:
        r"""List all user parcel templates

        Returns a list all of all user parcel template objects.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.ListUserParcelTemplatesRequest(
        )
        
        req = self.build_request(
            method="GET",
            path="/user-parcel-templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListUserParcelTemplatesGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="ListUserParcelTemplates", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplateList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_async(
        self, *,
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplateList:
        r"""List all user parcel templates

        Returns a list all of all user parcel template objects.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.ListUserParcelTemplatesRequest(
        )
        
        req = self.build_request(
            method="GET",
            path="/user-parcel-templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.ListUserParcelTemplatesGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="ListUserParcelTemplates", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplateList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def create(
        self, *,
        request: Union[components.UserParcelTemplateCreateRequest, components.UserParcelTemplateCreateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplate:
        r"""Create a new user parcel template

        Creates a new user parcel template. <br>You can choose to create a
        parcel template using a preset carrier template as a starting point, or
        you can create an entirely custom one. To use a preset carrier template,
        pass in a unique template token from <a href=\"#tag/Parcel-Templates\">this list</a>
        plus the weight fields (**weight** and **weight_unit**). Otherwise, omit
        the template field and pass the other fields, for the weight, length, height,
        and depth, as well as their units.\" 

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.UserParcelTemplateCreateRequest(
            request=utils.unmarshal(request, components.UserParcelTemplateCreateRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/user-parcel-templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.UserParcelTemplateCreateRequest),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="CreateUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_async(
        self, *,
        request: Union[components.UserParcelTemplateCreateRequest, components.UserParcelTemplateCreateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplate:
        r"""Create a new user parcel template

        Creates a new user parcel template. <br>You can choose to create a
        parcel template using a preset carrier template as a starting point, or
        you can create an entirely custom one. To use a preset carrier template,
        pass in a unique template token from <a href=\"#tag/Parcel-Templates\">this list</a>
        plus the weight fields (**weight** and **weight_unit**). Otherwise, omit
        the template field and pass the other fields, for the weight, length, height,
        and depth, as well as their units.\" 

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = components.UserParcelTemplateCreateRequest(
            request=utils.unmarshal(request, components.UserParcelTemplateCreateRequest) if not isinstance(request, BaseModel) else request,
        )
        
        req = self.build_request(
            method="POST",
            path="/user-parcel-templates",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.CreateUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.UserParcelTemplateCreateRequest),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="CreateUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def delete(
        self, *,
        user_parcel_template_object_id: str,
        server_url: Optional[str] = None,
    ):
        r"""Delete a user parcel template

        Deletes a user parcel template using an object ID.

        :param user_parcel_template_object_id: Object ID of the user parcel template
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.DeleteUserParcelTemplateRequest(
            user_parcel_template_object_id=user_parcel_template_object_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/user-parcel-templates/{UserParcelTemplateObjectId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            _globals=operations.DeleteUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="DeleteUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def delete_async(
        self, *,
        user_parcel_template_object_id: str,
        server_url: Optional[str] = None,
    ):
        r"""Delete a user parcel template

        Deletes a user parcel template using an object ID.

        :param user_parcel_template_object_id: Object ID of the user parcel template
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.DeleteUserParcelTemplateRequest(
            user_parcel_template_object_id=user_parcel_template_object_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/user-parcel-templates/{UserParcelTemplateObjectId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            _globals=operations.DeleteUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="DeleteUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get(
        self, *,
        user_parcel_template_object_id: str,
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplate:
        r"""Retrieves a user parcel template

        Returns the parcel template information for a specific user parcel
        template, identified by the object ID.

        :param user_parcel_template_object_id: Object ID of the user parcel template
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetUserParcelTemplateRequest(
            user_parcel_template_object_id=user_parcel_template_object_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/user-parcel-templates/{UserParcelTemplateObjectId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="GetUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_async(
        self, *,
        user_parcel_template_object_id: str,
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplate:
        r"""Retrieves a user parcel template

        Returns the parcel template information for a specific user parcel
        template, identified by the object ID.

        :param user_parcel_template_object_id: Object ID of the user parcel template
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetUserParcelTemplateRequest(
            user_parcel_template_object_id=user_parcel_template_object_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/user-parcel-templates/{UserParcelTemplateObjectId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.GetUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="GetUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update(
        self, *,
        user_parcel_template_object_id: str,
        user_parcel_template_update_request: Optional[Union[components.UserParcelTemplateUpdateRequest, components.UserParcelTemplateUpdateRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplate:
        r"""Update an existing user parcel template

        Updates an existing user parcel template.

        :param user_parcel_template_object_id: Object ID of the user parcel template
        :param user_parcel_template_update_request: 
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.UpdateUserParcelTemplateRequest(
            user_parcel_template_object_id=user_parcel_template_object_id,
            user_parcel_template_update_request=utils.unmarshal(user_parcel_template_update_request, components.UserParcelTemplateUpdateRequest) if not isinstance(user_parcel_template_update_request, BaseModel) and user_parcel_template_update_request is not None else user_parcel_template_update_request,
        )
        
        req = self.build_request(
            method="PUT",
            path="/user-parcel-templates/{UserParcelTemplateObjectId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.UpdateUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.user_parcel_template_update_request, False, True, "json", Optional[components.UserParcelTemplateUpdateRequest]),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="UpdateUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_async(
        self, *,
        user_parcel_template_object_id: str,
        user_parcel_template_update_request: Optional[Union[components.UserParcelTemplateUpdateRequest, components.UserParcelTemplateUpdateRequestTypedDict]] = None,
        server_url: Optional[str] = None,
    ) -> components.UserParcelTemplate:
        r"""Update an existing user parcel template

        Updates an existing user parcel template.

        :param user_parcel_template_object_id: Object ID of the user parcel template
        :param user_parcel_template_update_request: 
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.UpdateUserParcelTemplateRequest(
            user_parcel_template_object_id=user_parcel_template_object_id,
            user_parcel_template_update_request=utils.unmarshal(user_parcel_template_update_request, components.UserParcelTemplateUpdateRequest) if not isinstance(user_parcel_template_update_request, BaseModel) and user_parcel_template_update_request is not None else user_parcel_template_update_request,
        )
        
        req = self.build_request(
            method="PUT",
            path="/user-parcel-templates/{UserParcelTemplateObjectId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            _globals=operations.UpdateUserParcelTemplateGlobals(
                shippo_api_version=self.sdk_configuration.globals.shippo_api_version,
            ),
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.user_parcel_template_update_request, False, True, "json", Optional[components.UserParcelTemplateUpdateRequest]),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="UpdateUserParcelTemplate", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["400","4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.UserParcelTemplate])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 400 or http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
