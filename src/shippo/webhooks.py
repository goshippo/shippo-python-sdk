"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .basesdk import BaseSDK
from shippo._hooks import HookContext
from shippo.models import components, errors, operations
from shippo.types import BaseModel
import shippo.utils as utils
from typing import Optional, Union

class Webhooks(BaseSDK):
    r"""Webhooks are a way for Shippo to notify your application when a specific event occurs. For example, when a label is purchased or when a shipment tracking status has changed. You can use webhooks to trigger actions in your application, such as sending an email or updating a database.
    <SchemaDefinition schemaRef=\"#/components/schemas/Webhook\"/>

    # Webhook Payload
    The payload is the body of the POST request Shippo sends to the URL specified at the time of webhook registration.
    <SchemaDefinition schemaRef=\"#/components/schemas/WebhookPayload\"/>
    """
    
    
    def create_webhook(
        self, *,
        request: Union[components.WebhookUpdateRequest, components.WebhookUpdateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Webhook:
        r"""Create a new webhook

        Creates a new webhook to send notifications to a URL when a specific event occurs.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, components.WebhookUpdateRequest)
        
        req = self.build_request(
            method="POST",
            path="/webhooks",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.WebhookUpdateRequest),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="createWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Webhook])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def create_webhook_async(
        self, *,
        request: Union[components.WebhookUpdateRequest, components.WebhookUpdateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Webhook:
        r"""Create a new webhook

        Creates a new webhook to send notifications to a URL when a specific event occurs.

        :param request: The request object to send.
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, components.WebhookUpdateRequest)
        
        req = self.build_request(
            method="POST",
            path="/webhooks",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request, False, False, "json", components.WebhookUpdateRequest),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="createWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 201:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Webhook])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def list_webhooks(
        self, *,
        server_url: Optional[str] = None,
    ) -> components.WebhookPaginatedList:
        r"""List all webhooks

        Returns a list of all webhooks you have created.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        req = self.build_request(
            method="GET",
            path="/webhooks",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="listWebhooks", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.WebhookPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def list_webhooks_async(
        self, *,
        server_url: Optional[str] = None,
    ) -> components.WebhookPaginatedList:
        r"""List all webhooks

        Returns a list of all webhooks you have created.

        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        req = self.build_request(
            method="GET",
            path="/webhooks",
            base_url=base_url,
            url_variables=url_variables,
            request=None,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="listWebhooks", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.WebhookPaginatedList])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def get_webhook(
        self, *,
        webhook_id: str,
        server_url: Optional[str] = None,
    ) -> components.Webhook:
        r"""Retrieve a specific webhook

        Returns the details of a specific webhook using the webhook object ID.

        :param webhook_id: Object ID of the webhook to retrieve
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetWebhookRequest(
            webhook_id=webhook_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/webhooks/{webhookId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="getWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Webhook])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def get_webhook_async(
        self, *,
        webhook_id: str,
        server_url: Optional[str] = None,
    ) -> components.Webhook:
        r"""Retrieve a specific webhook

        Returns the details of a specific webhook using the webhook object ID.

        :param webhook_id: Object ID of the webhook to retrieve
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.GetWebhookRequest(
            webhook_id=webhook_id,
        )
        
        req = self.build_request(
            method="GET",
            path="/webhooks/{webhookId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="getWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Webhook])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def update_webhook(
        self, *,
        webhook_id: str,
        webhook_update_request: Union[components.WebhookUpdateRequest, components.WebhookUpdateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Webhook:
        r"""Update an existing webhook

        Updates an existing webhook using the webhook object ID.

        :param webhook_id: Object ID of the webhook to retrieve
        :param webhook_update_request: 
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.UpdateWebhookRequest(
            webhook_id=webhook_id,
            webhook_update_request=utils.unmarshal(webhook_update_request, components.WebhookUpdateRequest) if not isinstance(webhook_update_request, BaseModel) else webhook_update_request,
        )
        
        req = self.build_request(
            method="PUT",
            path="/webhooks/{webhookId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.webhook_update_request, False, False, "json", components.WebhookUpdateRequest),
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="updateWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Webhook])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def update_webhook_async(
        self, *,
        webhook_id: str,
        webhook_update_request: Union[components.WebhookUpdateRequest, components.WebhookUpdateRequestTypedDict],
        server_url: Optional[str] = None,
    ) -> components.Webhook:
        r"""Update an existing webhook

        Updates an existing webhook using the webhook object ID.

        :param webhook_id: Object ID of the webhook to retrieve
        :param webhook_update_request: 
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.UpdateWebhookRequest(
            webhook_id=webhook_id,
            webhook_update_request=utils.unmarshal(webhook_update_request, components.WebhookUpdateRequest) if not isinstance(webhook_update_request, BaseModel) else webhook_update_request,
        )
        
        req = self.build_request(
            method="PUT",
            path="/webhooks/{webhookId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(request.webhook_update_request, False, False, "json", components.WebhookUpdateRequest),
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="updateWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 200:
            # pylint: disable=no-else-return
            if utils.match_content_type(http_res.headers.get("Content-Type") or "", "application/json"):                
                out = utils.unmarshal_json(http_res.text, Optional[components.Webhook])
                return out
            
            content_type = http_res.headers.get("Content-Type")
            raise errors.SDKError(f"unknown content-type received: {content_type}", http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    def delete_webhook(
        self, *,
        webhook_id: str,
        server_url: Optional[str] = None,
    ):
        r"""Delete a specific webhook

        Deletes a specific webhook using the webhook object ID.

        :param webhook_id: Object ID of the webhook to delete
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.DeleteWebhookRequest(
            webhook_id=webhook_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/webhooks/{webhookId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            security=self.sdk_configuration.security,
        )
        
        http_res = self.do_request(
            hook_ctx=HookContext(operation_id="deleteWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
    
    async def delete_webhook_async(
        self, *,
        webhook_id: str,
        server_url: Optional[str] = None,
    ):
        r"""Delete a specific webhook

        Deletes a specific webhook using the webhook object ID.

        :param webhook_id: Object ID of the webhook to delete
        :param server_url: Override the default server URL for this method
        """
        base_url = None
        url_variables = None
        if server_url is not None:
            base_url = server_url
        
        request = operations.DeleteWebhookRequest(
            webhook_id=webhook_id,
        )
        
        req = self.build_request(
            method="DELETE",
            path="/webhooks/{webhookId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="*/*",
            security=self.sdk_configuration.security,
        )
        
        http_res = await self.do_request_async(
            hook_ctx=HookContext(operation_id="deleteWebhook", oauth2_scopes=[], security_source=self.sdk_configuration.security),
            request=req,
            error_status_codes=["4XX","5XX"],
        )
        
        
        if http_res.status_code == 204:
            pass
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError("API error occurred", http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError("unknown status code received", http_res.status_code, http_res.text, http_res)
    
